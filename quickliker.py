"""
Auto Clicker - –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è macOS –∏ Windows
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip install PyQt6 pynput
–ó–∞–ø—É—Å–∫: python auto_clicker.py
–°–±–æ—Ä–∫–∞: pyinstaller --onefile --windowed --name="AutoClicker" auto_clicker.py
"""

import sys
import time
from threading import Thread
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QLabel, QPushButton, QSpinBox, QRadioButton, 
                             QCheckBox, QComboBox, QGroupBox, QHBoxLayout, QSlider)
from PyQt6.QtCore import Qt, QTimer, pyqtSignal, QObject
from PyQt6.QtGui import QFont, QPalette, QColor
from pynput import mouse, keyboard
from pynput.keyboard import Key, KeyCode


class ClickerSignals(QObject):
    """–°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    status_changed = pyqtSignal(bool)


class AutoClicker(QMainWindow):
    def __init__(self):
        super().__init__()
        self.signals = ClickerSignals()
        self.signals.status_changed.connect(self.update_status)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.clicks_per_second = 10
        self.mouse_button = mouse.Button.left
        self.hold_mode = False
        self.hotkey = 'option+-'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Option + -
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_active = False
        self.click_thread = None
        self.mouse_controller = mouse.Controller()
        self.current_keys = set()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self.init_ui()
        
        # –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.keyboard_listener = keyboard.Listener(
            on_press=self.on_key_press,
            on_release=self.on_key_release
        )
        self.keyboard_listener.start()
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle('Auto Clicker')
        self.setFixedSize(520, 680)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        layout.setSpacing(18)
        layout.setContentsMargins(25, 25, 25, 25)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel('üñ±Ô∏è Auto Clicker')
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_font = QFont()
        title_font.setPointSize(28)
        title_font.setBold(True)
        title.setFont(title_font)
        layout.addWidget(title)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel('‚ö™ –í–´–ö–õ–Æ–ß–ï–ù')
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_label.setStyleSheet("""
            QLabel {
                background-color: #f0f0f0;
                color: #666;
                padding: 25px;
                border-radius: 15px;
                font-weight: bold;
                font-size: 22px;
            }
        """)
        layout.addWidget(self.status_label)
        
        # –ß–∞—Å—Ç–æ—Ç–∞ –∫–ª–∏–∫–æ–≤ —Å –ø–æ–ª–∑—É–Ω–∫–æ–º
        cps_group = QGroupBox('‚ö° –ß–∞—Å—Ç–æ—Ç–∞ –∫–ª–∏–∫–æ–≤')
        cps_group.setStyleSheet("QGroupBox { font-size: 16px; font-weight: bold; }")
        cps_layout = QVBoxLayout()
        
        # –ë–æ–ª—å—à–æ–π –¥–∏—Å–ø–ª–µ–π
        self.cps_display = QLabel(f'{self.clicks_per_second}')
        self.cps_display.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.cps_display.setStyleSheet("""
            QLabel { 
                font-size: 48px; 
                color: #667eea; 
                font-weight: bold;
                padding: 10px;
            }
        """)
        cps_layout.addWidget(self.cps_display)
        
        # –ü–æ–¥–ø–∏—Å—å
        cps_label = QLabel('–∫–ª–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É')
        cps_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        cps_label.setStyleSheet("QLabel { font-size: 14px; color: #999; }")
        cps_layout.addWidget(cps_label)
        
        # –ü–æ–ª–∑—É–Ω–æ–∫
        self.cps_slider = QSlider(Qt.Orientation.Horizontal)
        self.cps_slider.setRange(1, 100)
        self.cps_slider.setValue(10)
        self.cps_slider.setMinimumHeight(40)
        self.cps_slider.setStyleSheet("""
            QSlider::groove:horizontal {
                height: 8px;
                background: #e0e0e0;
                border-radius: 4px;
            }
            QSlider::handle:horizontal {
                background: #667eea;
                width: 24px;
                height: 24px;
                margin: -8px 0;
                border-radius: 12px;
            }
            QSlider::handle:horizontal:hover {
                background: #5568d3;
            }
        """)
        self.cps_slider.valueChanged.connect(self.update_cps)
        cps_layout.addWidget(self.cps_slider)
        
        # SpinBox –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        spinbox_layout = QHBoxLayout()
        spinbox_layout.addStretch()
        self.cps_spinbox = QSpinBox()
        self.cps_spinbox.setRange(1, 100)
        self.cps_spinbox.setValue(10)
        self.cps_spinbox.setMinimumHeight(40)
        self.cps_spinbox.setMinimumWidth(100)
        self.cps_spinbox.setStyleSheet("QSpinBox { font-size: 16px; padding: 5px; }")
        self.cps_spinbox.valueChanged.connect(self.update_cps_from_spinbox)
        spinbox_layout.addWidget(QLabel('–¢–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:'))
        spinbox_layout.addWidget(self.cps_spinbox)
        spinbox_layout.addStretch()
        cps_layout.addLayout(spinbox_layout)
        
        cps_group.setLayout(cps_layout)
        layout.addWidget(cps_group)
        
        # –ö–Ω–æ–ø–∫–∞ –º—ã—à–∏ - –ë–û–õ–¨–®–ò–ï –∫–Ω–æ–ø–∫–∏
        button_group = QGroupBox('üñ±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º—ã—à–∏')
        button_group.setStyleSheet("QGroupBox { font-size: 16px; font-weight: bold; }")
        button_layout = QHBoxLayout()
        button_layout.setSpacing(15)
        
        self.left_radio = QRadioButton('–õ–ï–í–ê–Ø')
        self.right_radio = QRadioButton('–ü–†–ê–í–ê–Ø')
        self.left_radio.setChecked(True)
        self.left_radio.setMinimumHeight(60)
        self.right_radio.setMinimumHeight(60)
        self.left_radio.setStyleSheet("""
            QRadioButton {
                font-size: 18px;
                font-weight: bold;
                padding: 15px;
            }
            QRadioButton::indicator {
                width: 25px;
                height: 25px;
            }
        """)
        self.right_radio.setStyleSheet("""
            QRadioButton {
                font-size: 18px;
                font-weight: bold;
                padding: 15px;
            }
            QRadioButton::indicator {
                width: 25px;
                height: 25px;
            }
        """)
        self.left_radio.toggled.connect(self.update_settings)
        button_layout.addWidget(self.left_radio)
        button_layout.addWidget(self.right_radio)
        button_group.setLayout(button_layout)
        layout.addWidget(button_group)
        
        # –†–µ–∂–∏–º —É–¥–µ—Ä–∂–∞–Ω–∏—è
        mode_group = QGroupBox('‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
        mode_group.setStyleSheet("QGroupBox { font-size: 16px; font-weight: bold; }")
        mode_layout = QVBoxLayout()
        self.hold_checkbox = QCheckBox('–†–µ–∂–∏–º —É–¥–µ—Ä–∂–∞–Ω–∏—è (–∑–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É)')
        self.hold_checkbox.setMinimumHeight(50)
        self.hold_checkbox.setStyleSheet("""
            QCheckBox { 
                font-size: 16px; 
                padding: 10px;
            }
            QCheckBox::indicator {
                width: 25px;
                height: 25px;
            }
        """)
        self.hold_checkbox.stateChanged.connect(self.update_settings)
        mode_layout.addWidget(self.hold_checkbox)
        mode_group.setLayout(mode_layout)
        layout.addWidget(mode_group)
        
        # –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞
        hotkey_group = QGroupBox('‚å®Ô∏è –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞')
        hotkey_group.setStyleSheet("QGroupBox { font-size: 16px; font-weight: bold; }")
        hotkey_layout = QVBoxLayout()
        
        self.hotkey_combo = QComboBox()
        self.hotkey_combo.addItems([
            'Option + -',
            'F6',
            'F7', 
            'F8', 
            'F9', 
            'F10', 
            'F11', 
            'F12'
        ])
        self.hotkey_combo.setCurrentText('Option + -')
        self.hotkey_combo.setMinimumHeight(50)
        self.hotkey_combo.setStyleSheet("QComboBox { font-size: 16px; padding: 10px; }")
        self.hotkey_combo.currentTextChanged.connect(self.update_hotkey)
        hotkey_layout.addWidget(self.hotkey_combo)
        
        hotkey_group.setLayout(hotkey_layout)
        layout.addWidget(hotkey_group)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint = QLabel('üí° –ù–∞–∂–º–∏—Ç–µ Option + - –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è')
        hint.setAlignment(Qt.AlignmentFlag.AlignCenter)
        hint.setStyleSheet("QLabel { color: #999; font-size: 14px; margin-top: 10px; }")
        self.hint_label = hint
        layout.addWidget(hint)
        
        layout.addStretch()
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        self.setStyleSheet("""
            QMainWindow {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #667eea, stop:1 #764ba2);
            }
            QWidget {
                background-color: white;
                border-radius: 20px;
            }
            QGroupBox {
                font-weight: bold;
                color: #555;
                border: 2px solid #e0e0e0;
                border-radius: 12px;
                margin-top: 15px;
                padding-top: 15px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 8px;
            }
        """)
    
    def update_cps(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CPS –∏–∑ –ø–æ–ª–∑—É–Ω–∫–∞"""
        self.clicks_per_second = value
        self.cps_display.setText(f'{value}')
        self.cps_spinbox.blockSignals(True)
        self.cps_spinbox.setValue(value)
        self.cps_spinbox.blockSignals(False)
        
        if self.is_active and not self.hold_mode:
            self.stop_clicking()
            self.start_clicking()
    
    def update_cps_from_spinbox(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CPS –∏–∑ spinbox"""
        self.clicks_per_second = value
        self.cps_display.setText(f'{value}')
        self.cps_slider.blockSignals(True)
        self.cps_slider.setValue(value)
        self.cps_slider.blockSignals(False)
        
        if self.is_active and not self.hold_mode:
            self.stop_clicking()
            self.start_clicking()
    
    def update_settings(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.mouse_button = mouse.Button.left if self.left_radio.isChecked() else mouse.Button.right
        self.hold_mode = self.hold_checkbox.isChecked()
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
        if self.is_active:
            self.stop_clicking()
            self.start_clicking()
    
    def update_hotkey(self, key_text):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏"""
        key_map = {
            'Option + -': 'option+-',
            'F6': 'f6',
            'F7': 'f7',
            'F8': 'f8',
            'F9': 'f9',
            'F10': 'f10',
            'F11': 'f11',
            'F12': 'f12',
        }
        self.hotkey = key_map.get(key_text, 'option+-')
        self.hint_label.setText(f'üí° –ù–∞–∂–º–∏—Ç–µ {key_text} –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è')
    
    def on_key_press(self, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏—à—É –≤ –Ω–∞–±–æ—Ä –Ω–∞–∂–∞—Ç—ã—Ö
            if hasattr(key, 'char'):
                self.current_keys.add(key.char)
            else:
                self.current_keys.add(str(key))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É
            if self.hotkey == 'option+-':
                # Option (Alt) + –º–∏–Ω—É—Å
                if (Key.alt in self.current_keys or Key.alt_l in self.current_keys or Key.alt_r in self.current_keys):
                    if '-' in self.current_keys:
                        self.toggle_clicking()
            elif self.hotkey == 'f6' and key == Key.f6:
                self.toggle_clicking()
            elif self.hotkey == 'f7' and key == Key.f7:
                self.toggle_clicking()
            elif self.hotkey == 'f8' and key == Key.f8:
                self.toggle_clicking()
            elif self.hotkey == 'f9' and key == Key.f9:
                self.toggle_clicking()
            elif self.hotkey == 'f10' and key == Key.f10:
                self.toggle_clicking()
            elif self.hotkey == 'f11' and key == Key.f11:
                self.toggle_clicking()
            elif self.hotkey == 'f12' and key == Key.f12:
                self.toggle_clicking()
        except:
            pass
    
    def on_key_release(self, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏"""
        try:
            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏—à—É –∏–∑ –Ω–∞–±–æ—Ä–∞
            if hasattr(key, 'char'):
                self.current_keys.discard(key.char)
            else:
                self.current_keys.discard(str(key))
        except:
            pass
    
    def toggle_clicking(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∫–ª–∏–∫–æ–≤"""
        if self.is_active:
            self.stop_clicking()
        else:
            self.start_clicking()
    
    def start_clicking(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–∫–æ–≤"""
        self.is_active = True
        self.signals.status_changed.emit(True)
        
        if self.hold_mode:
            # –†–µ–∂–∏–º —É–¥–µ—Ä–∂–∞–Ω–∏—è
            self.mouse_controller.press(self.mouse_button)
        else:
            # –†–µ–∂–∏–º –∫–ª–∏–∫–æ–≤ - –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.click_thread = Thread(target=self.click_loop, daemon=True)
            self.click_thread.start()
    
    def stop_clicking(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–∫–æ–≤"""
        self.is_active = False
        self.signals.status_changed.emit(False)
        
        if self.hold_mode:
            try:
                self.mouse_controller.release(self.mouse_button)
            except:
                pass
    
    def click_loop(self):
        """–¶–∏–∫–ª –∫–ª–∏–∫–æ–≤ - —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–∫–∞ is_active = True"""
        interval = 1.0 / self.clicks_per_second
        while self.is_active and not self.hold_mode:
            try:
                self.mouse_controller.click(self.mouse_button)
                time.sleep(interval)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}")
                break
    
    def update_status(self, is_active):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ UI"""
        if is_active:
            mode_text = "–£–î–ï–†–ñ–ê–ù–ò–ï" if self.hold_mode else f"{self.clicks_per_second} –ö–õ–ò–ö–û–í/–°–ï–ö"
            button_text = "–õ–ï–í–ê–Ø ‚Üê" if self.mouse_button == mouse.Button.left else "–ü–†–ê–í–ê–Ø ‚Üí"
            self.status_label.setText(f'üü¢ –í–ö–õ–Æ–ß–ï–ù\n{button_text} | {mode_text}')
            self.status_label.setStyleSheet("""
                QLabel {
                    background-color: #4caf50;
                    color: white;
                    padding: 25px;
                    border-radius: 15px;
                    font-weight: bold;
                    font-size: 22px;
                }
            """)
        else:
            self.status_label.setText('‚ö™ –í–´–ö–õ–Æ–ß–ï–ù')
            self.status_label.setStyleSheet("""
                QLabel {
                    background-color: #f0f0f0;
                    color: #666;
                    padding: 25px;
                    border-radius: 15px;
                    font-weight: bold;
                    font-size: 22px;
                }
            """)
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.stop_clicking()
        self.keyboard_listener.stop()
        event.accept()


def main():
    app = QApplication(sys.argv)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
    font = QFont()
    font.setFamily('Segoe UI' if sys.platform == 'win32' else 'SF Pro Display')
    app.setFont(font)
    
    clicker = AutoClicker()
    clicker.show()
    
    sys.exit(app.exec())


if __name__ == '__main__':
    main()